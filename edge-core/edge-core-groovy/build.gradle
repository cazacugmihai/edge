def apiDir = "$buildDir/api"
def apiProject = parent.childProjects.'edge-core-api'

import javassist.*

def _generator = { CtClass c ->
  def placeholder = '_lang_'
  def lang = 'groovy'

  def map = new ClassMap()
  c.refClasses.each { name ->
    if(name.contains(placeholder)) {
      map.putAt(name, name.replace(placeholder,lang))
    }
  }

  c.name = c.name.replace(placeholder, lang)
  c.replaceClassName(map)

  def cf = c.classFile
  cf.interfaces = cf.interfaces.collect { name ->
    return name.replace(placeholder, lang)
  }

  // perform generic changes
  if(c.genericSignature) {
    c.genericSignature = c.genericSignature.replace(placeholder,lang)
  }

  c.declaredBehaviors.each { CtBehavior method ->
    if(method.genericSignature) {
      method.genericSignature = method.genericSignature.replace(placeholder,lang)
    }

    def info = method.methodInfo
    info.descriptor = info.descriptor.replace(placeholder, lang)
  }

  c.declaredFields.each { CtField field ->
    if(field.genericSignature) {
      field.genericSignature = field.genericSignature.replace(placeholder,lang)
    }

    def info = field.fieldInfo
    info.descriptor = info.descriptor.replace(placeholder, lang)
  }
}

task('generateGroovy', type: com.darylteo.gradle.codegen.tasks.GenerateSources) {
  dependsOn apiProject.build, apiProject.clean
  from apiProject
  generator = _generator
}
task getApi(type: Sync) {
  from generateGroovy
  into file(apiDir)
}

sourceSets {
  main {
    compileClasspath += files(apiDir) { builtBy getApi }
  }
}

[modZip, copyMod, jar].each { task -> task.from(file(apiDir)) }