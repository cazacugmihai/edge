// All Projects Configuration - Repositories and Dependencies
allprojects {
	// Java Configuration
	apply plugin: 'java'

	// Vertx Jars
	FileCollection coreJars = fileTree(dir: "$System.env.VERTX_HOME/lib", include: '*.jar')

	configurations {
		// Exclude vertx jars
		// Ensure you run tests to make sure dependencies do not conflict
		for (File jar : coreJars){
			String moduleName = jar.getName();
			moduleName = moduleName.substring(0, moduleName.lastIndexOf('-'))

			compile.exclude module: moduleName
		}

		core
		provided
	}

	dependencies {
		testCompile	"junit:junit:$junitVersion"

		core	coreJars	// this is just for collectDeps
		compile coreJars	// this is for compiling
	}

	repositories {
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		mavenCentral()
	}

	// Pulls all dependencies into local project directory for IDEs
	task collectDeps(type: Copy) {
		description = 'conveniently collect dependencies for other IDEs'
		destinationDir = file("$rootDir/build/deps")
		into("core") {
			from configurations.core
		}
		into("compile") {
			from configurations.compile
		}
		into("test") {
			from configurations.testCompile
		}
	}
}

project(':edge-core'){
	dependencies {
		compile	project(':edge-promises')
		compile	project(':edge-routematcher')
		compile	project(':edge-controllers')
	}
}

project(':edge-routematcher'){
	dependencies {
		compile	project(':edge-promises')
		compile	"com.github.jknack:handlebars:$handlebarsVersion"
	}
}

project(':edge-controllers'){
	dependencies {
		compile project(':edge-promises')
		compile project(':edge-routematcher')
	}
}

project(':edge-tests'){
	dependencies {
		compile	project(':edge-core')
	}

	test {
		// Some vert.x properties
		systemProperties['vertx.test.timeout'] = 4\

		workingDir = "$projectDir/test-dir"
	}

}

// Root Project Configuration
apply plugin: 'eclipse'
apply plugin: 'idea'
jar.enabled = false

task dist(type: Zip, dependsOn:jar) {
	for (String b : subprojects.buildDir){
		from fileTree(dir: "$b/libs", include: '*.jar')
	}

	destinationDir = file("$rootProject.buildDir/dist")
	archiveName
}

// Wrapper Configuration
task wrapper(type: Wrapper) {
	gradleVersion = "$gradleVersion"
}

// IDE Configuration
tasks.eclipse.dependsOn collectDeps
tasks.idea.dependsOn collectDeps